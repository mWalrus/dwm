diff --git a/config.h b/config.h
index b23a838..e770973 100644
--- a/config.h
+++ b/config.h
@@ -45,6 +45,7 @@ static const Layout layouts[] = {
 	{ "[]=",      tile },    /* first entry is default */
 	{ "><>",      NULL },    /* no layout function means floating behavior */
 	{ "[M]",      monocle },
+	{ "|||",      col },
 };
 
 /* key definitions */
@@ -95,6 +96,7 @@ static const Key keys[] = {
 	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
 	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
 	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
+	{ MODKEY,                       XK_c,      setlayout,      {.v = &layouts[3]} },
 	{ MODKEY,                       XK_space,  setlayout,      {0} },
 	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
 	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
diff --git a/dwm.c b/dwm.c
index d29905d..16376ab 100644
--- a/dwm.c
+++ b/dwm.c
@@ -217,6 +217,7 @@ static void sigterm(int unused);
 static void spawn(const Arg *arg);
 static void tag(const Arg *arg);
 static void tagmon(const Arg *arg);
+static void col(Monitor *m);
 static void tile(Monitor *m);
 static void togglebar(const Arg *arg);
 static void togglefloating(const Arg *arg);
@@ -1882,6 +1883,36 @@ tagmon(const Arg *arg)
 	sendmon(selmon->sel, dirtomon(arg->i));
 }
 
+void
+col(Monitor *m)
+{
+	unsigned int i, n, mw, my;
+	float cw;
+	Client *c;
+
+	for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
+	if (n == 0)
+		return;
+
+	if (n > m->nmaster) {
+		if (n == 2)
+			cw = m->mfact;
+		else
+			cw = 1.0 / n;
+		mw = m->nmaster ? m->ww * cw : 0;
+	}
+	else
+		mw = m->ww;
+	for (i = my = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++) {
+		if (i < m->nmaster)
+			resize(c, m->wx, m->wy + my, mw - (2*c->bw), m->wh - (2*c->bw), 0);
+		else
+			resize(c, m->wx + (mw*i), m->wy + my, mw - (2*c->bw), m->wh - (2*c->bw), 0);
+		if (my + HEIGHT(c) < m->wh)
+			my += HEIGHT(c);
+	}
+}
+
 void
 tile(Monitor *m)
 {
